const gameStartTime = Date.now();

// ============================== BI·∫æN ================================
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const bullets = [];
canvas.addEventListener("click", function(e) {
  // V·ªõi Plasma Rifle, click s·∫Ω b·∫Øn vi√™n nh·ªè
  if (currentWeapon === "Plasma Rifle") {
    shootBullet(e);
  }
  // V·ªõi c√°c s√∫ng c√≤n l·∫°i (tr·ª´ Machine Gun v√¨ n√≥ b·∫Øn li√™n trong update)
  else if (currentWeapon !== "Machine Gun") {
    shootBullet(e);
  }
});

// T·∫°o m·∫£ng h·ªôp s√∫ng, h·ªôp ƒë·∫°n, l·ª±u ƒë·∫°n, v·ª• n·ªï
const weaponBoxes = [];
const ammoBoxes = [];
const grenades = [];
const explosions = [];
const damages = []; // ch·ª©a c√°c dame ƒëang hi·ªÉn th·ªã
const notifications = []; // M·∫£ng ch·ª©a c√°c th√¥ng b√°o hi·ªÉn th·ªã tr√™n m√†n h√¨nh
const weapons = ["Pistol", "Shotgun", "Laser Gun", "Machine Gun", "Plasma Rifle"];
let currentWeapon = "Pistol";  // m·∫∑c ƒë·ªãnh

let gunRecoil = 0;
// ƒêi·ªÅu ch·ªânh c√°c gi√° tr·ªã n√†y ƒë·ªÉ c√≥ hi·ªáu ·ª©ng gi·∫≠t kh√°c nhau cho t·ª´ng lo·∫°i s√∫ng
const WEAPON_RECOIL_AMOUNT = {
    "Pistol": 6,
    "Shotgun": 8, // Gi·∫≠t m·∫°nh h∆°n
    "Laser Gun": 3,
    "Machine Gun": 4,
    "Plasma Rifle": 5
};
const RECOIL_SPEED = 0.8;

// Th·ªùi gian ch·ªõp s√°ng ·ªü ƒë·∫ßu n√≤ng (ms)
const WEAPON_FLASH_DURATION = {
    "Pistol": 50,
    "Shotgun": 70, // Ch·ªõp l√¢u h∆°n m·ªôt ch√∫t
    "Laser Gun": 30, // Ch·ªõp nhanh
    "Machine Gun": 60,
    "Plasma Rifle": 30
};
let lastGunFireTime = 0; // Th·ªùi ƒëi·ªÉm cu·ªëi c√πng b·∫Øn b·∫•t k·ª≥ kh·∫©u s√∫ng n√†o


// Bi·∫øn cho t√≠nh nƒÉng Dash/TƒÉng t·ªëc
let isRightMouseDown = false; // Theo d√µi tr·∫°ng th√°i chu·ªôt ph·∫£i
let isDashing = false;      // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i c√≥ ƒëang dash kh√¥ng
let dashDuration = 150;     // Th·ªùi gian dash (ms)
let dashSpeedMultiplier = 3.5; // T·ªëc ƒë·ªô dash (v√≠ d·ª•: 2.5 l·∫ßn t·ªëc ƒë·ªô b√¨nh th∆∞·ªùng)
let dashCooldown = 2000;    // Th·ªùi gian h·ªìi chi√™u dash (ms)
let lastDashTime = 0;       // Th·ªùi ƒëi·ªÉm dash cu·ªëi c√πng

// M·∫£ng ch·ª©a c√°c h·∫°t kh√≥i
const particles = [];

// Bi·∫øn cho hi·ªáu ·ª©ng kh√≥i (ƒëi·ªÅu ch·ªânh c√°c gi√° tr·ªã n√†y)
const PARTICLE_COUNT_PER_FRAME = 5; // TƒÉng s·ªë h·∫°t kh√≥i m·ªói frame (v√≠ d·ª•: t·ª´ 2 l√™n 3 ho·∫∑c 4)
const PARTICLE_RADIUS_MIN = 2;      // K√≠ch th∆∞·ªõc h·∫°t kh√≥i nh·ªè nh·∫•t
const PARTICLE_RADIUS_MAX = 6;      // K√≠ch th∆∞·ªõc h·∫°t kh√≥i l·ªõn nh·∫•t
const PARTICLE_SPEED_MULTIPLIER = 1; // T·ªëc ƒë·ªô di chuy·ªÉn c·ªßa h·∫°t kh√≥i (th·ª≠ 1-2)
const PARTICLE_DECAY_RATE = 0.02;   // T·ªëc ƒë·ªô m·ªù d·∫ßn c·ªßa h·∫°t kh√≥i (gi·∫£m gi√° tr·ªã n√†y ƒë·ªÉ kh√≥i t·ªìn t·∫°i l√¢u h∆°n)
const PARTICLE_SHRINK_RATE = 0.05;  // T·ªëc ƒë·ªô nh·ªè d·∫ßn c·ªßa h·∫°t kh√≥i (gi·∫£m gi√° tr·ªã n√†y ƒë·ªÉ kh√≥i bi·∫øn m·∫•t ch·∫≠m h∆°n)

let isMouseDown = false;
canvas.addEventListener("mousedown", () => {
  isMouseDown = true;
});
canvas.addEventListener("mouseup", () => {
  isMouseDown = false;
});

canvas.addEventListener("mousedown", function(e) {
  if (e.button === 0) {
    isMouseDown = true;

    if (currentWeapon === "Plasma Rifle") {
      isChargingPlasma = true;
      plasmaChargeStartTime = Date.now();
      plasmaChargeStarted = false;
      plasmaFullyChargedPlayed = false; // üëà reset ƒë·ªÉ chu·∫©n b·ªã ph√°t l·∫°i √¢m ding n·∫øu s·∫°c ƒë·∫ßy
    }
  } else if (e.button === 2) {
    isRightMouseDown = true;
    startDash();
  }
});

canvas.addEventListener("mouseup", function(e) {
  if (e.button === 0) {
    isMouseDown = false;

    if (currentWeapon === "Plasma Rifle" && isChargingPlasma) {
      isChargingPlasma = false;

      // üëá T·∫Øt √¢m s·∫°c khi nh·∫£ chu·ªôt
      plasmaChargeSound.pause();
      plasmaChargeSound.currentTime = 0;
      plasmaChargeStarted = false;
      if (plasmaChargeAmount >= MAX_PLASMA_CHARGE && ammo["Plasma Rifle"] >= 2) {
        shootBigPlasmaBullet(lastMouse.x, lastMouse.y);
        justFiredBigPlasma = true;
        plasmaChargeAmount = 0;
      } else {
        plasmaChargeAmount = 0;
      }
    }
  }
});

const ammo = {
  "Pistol": 20,
  "Shotgun": 10,
  "Laser Gun": 30,
  "Machine Gun": 30,
  "Plasma Rifle": 20, //20
  "Grenade": 1
};
const player = {
  x: 400,
  y: 300,
  radius: 20,
  color: "cyan",
  speed: 3,
  hp: 100,
  maxHp: 100
};

const weaponStats = {
  "Pistol": { ammo: 20, damage: 15, ammoPerBox: 10 },      // +10 ƒë·∫°n m·ªói h·ªôp
  "Shotgun": { ammo: 10, damage: 6, ammoPerBox: 8 },       // +8 ƒë·∫°n m·ªói h·ªôp
  "Laser Gun": { ammo: 30, damage: 12, ammoPerBox: 15 },  // +15 ƒë·∫°n m·ªói h·ªôp
  "Machine Gun": { ammo: 30, damage: 5, ammoPerBox: 25 }, // +25 ƒë·∫°n m·ªói h·ªôp
  "Plasma Rifle": { ammo: 20, damage: 15, ammoPerBox: 25}, // +10 ƒë·∫°n m·ªói h·ªôp
  "Grenade": { ammo: 1, damage: 30, radius: 150 } // L·ª±u ƒë·∫°n reset v·ªÅ 2 
};


// √Çm thanh
const shootSound = new Audio("sound/gunshot.mp3");
const hitSound = new Audio("sound/punch.mp3");
const damageSound = new Audio("sound/character.mp3");
const reloadSound = new Audio("sound/reload.mp3");
const shotgunSound = new Audio("sound/shotgun.mp3");
const laserSound = new Audio("sound/blaster.mp3");
const machineGunSound = new Audio("sound/machinegun1.mp3");
const explosionSound = new Audio("sound/explosion.mp3");
const dashSound = new Audio("sound/boost2.mp3"); 
const bossAlertSound = new Audio("sound/dangerboss.mp3");
const endingMusic = new Audio("sound/ending_game.mp3");
const shieldBoostSound = new Audio("sound/shieldboost.mp3");
const shieldActivateSound = new Audio("sound/shield_on.mp3");
const healthPacksSound = new Audio("sound/healthpack.mp3");
shootSound.load();
hitSound.volume = 0.5; hitSound.load();
damageSound.volume = 0.5; damageSound.load();
reloadSound.load();
shotgunSound.volume = 0.5; shotgunSound.load();
laserSound.volume = 0.4; laserSound.load();
machineGunSound.playbackRate = 8.5; machineGunSound.load();
explosionSound.volume = 0.3;
dashSound.volume = 0.4; dashSound.load(); 
bossAlertSound.volume = 0.5; bossAlertSound.load();
endingMusic.volume = 0.7; endingMusic.load();
endingMusic.addEventListener("ended", () => {
  endingMusic.currentTime = 0;
  endingMusic.play();
});
shieldBoostSound.currentTime = 0; // tua v·ªÅ ƒë·∫ßu n·∫øu ch∆∞a k·∫øt th√∫c
shieldBoostSound.play(); shieldBoostSound.load();
healthPacksSound.load();

const plasmaSmallSound = new Audio("sound/plasma_small.mp3"); 
const plasmaChargeSound = new Audio("sound/plasma_charge.mp3"); plasmaChargeSound.volume = 0.4;
const plasmaDingSound = new Audio("sound/plasma_ding.mp3"); plasmaDingSound.volume = 0.4; 
const plasmaBigSound = new Audio("sound/plasma_big.mp3"); plasmaBigSound.volume = 0.6; //0.6
plasmaSmallSound.load();
plasmaChargeSound.load();
plasmaDingSound.load();
plasmaBigSound.load();

// ============================== C√ÅC H√ÄM ================================


// ============== H√ÄM THU·ªòC V·ªÄ S√öNG PLASMA ======================== 
// H∆∞·ªõng di chuy·ªÉn c·ªßa chu·ªôt 
let lastMouse = { x: player.x + 100, y: player.y };
canvas.addEventListener("mousemove", function(e) {
  const rect = canvas.getBoundingClientRect();
  lastMouse.x = e.clientX - rect.left;
  lastMouse.y = e.clientY - rect.top;
});

// Bi·∫øn cho Plasma Rifle
let isChargingPlasma = false; // Theo d√µi ng∆∞·ªùi ch∆°i c√≥ ƒëang gi·ªØ chu·ªôt tr√°i ƒë·ªÉ t√≠ch t·ª• plasma kh√¥ng
let plasmaChargeAmount = 0;   // M·ª©c nƒÉng l∆∞·ª£ng plasma ƒë√£ t√≠ch t·ª• (0 ƒë·∫øn 100)
const MAX_PLASMA_CHARGE = 100; // M·ª©c t√≠ch t·ª• t·ªëi ƒëa
const CHARGE_RATE = 2;       // T·ªëc ƒë·ªô t√≠ch t·ª• nƒÉng l∆∞·ª£ng m·ªói frame
const DRAIN_RATE = 5;        // T·ªëc ƒë·ªô gi·∫£m nƒÉng l∆∞·ª£ng khi nh·∫£ chu·ªôt nh∆∞ng ch∆∞a ƒë·ªß ng∆∞·ª°ng
// const OVERCHARGE_PENALTY_TIME = 1000; // Th·ªùi gian ph·∫°t khi t√≠ch t·ª• qu√° ng∆∞·ª°ng (ms)
// let overchargeTime = 0; // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu ph·∫°t
const PLASMA_CHARGE_THRESHOLD = 70; // Ng∆∞·ª°ng t·ªëi thi·ªÉu ƒë·ªÉ b·∫Øn ƒë·∫°n l·ªõn
let justFiredBigPlasma = false; // <-- TH√äM D√íNG N√ÄY

let lastPlasmaSmallShot = 0;
const plasmaSmallFireRate = 150; // T·ªëc ƒë·ªô b·∫Øn ƒë·∫°n nh·ªè Plasma
let plasmaChargeStartTime = 0;
let plasmaChargeStarted = false;

function drawBullets() {
    bullets.forEach(b => {
        if (b.type === "laser_beam") { // N·∫øu c√≥ lo·∫°i ƒë·∫°n laser ƒë·∫∑c bi·ªát (ch∆∞a c√≥ trong code n√†y)
            // drawLaserBeam(b.x, b.y, b.targetX, b.targetY, b.color, b.width);
        } else if (b.type === "boss_projectile") { // N·∫øu c√≥ ƒë·∫°n c·ªßa boss
            drawCircle(b);
        }
        else { // M·∫∑c ƒë·ªãnh l√† h√¨nh tr√≤n
            drawCircle(b);
        }
    });
}
// ================================================================== 


let score = 0;
const zombies = [];
let lastMutantSpawnTime = 0;
const fireTrails = [];
let zombieSpawnInterval;

// Sinh ra zombie m·ªói 500ms 
function spawnZombie() {
  const now = Date.now();
  const elapsedSinceLastMutant = (now - lastMutantSpawnTime) / 1000;

  // M·ªói 20 gi√¢y sinh ra 1 zombie ƒë·ªôt bi·∫øn
  if (elapsedSinceLastMutant >= 25) {
    spawnMutantZombie();
    lastMutantSpawnTime = now;
    return; // Kh√¥ng sinh zombie th∆∞·ªùng trong l·∫ßn g·ªçi n√†y
  }

  // Ng∆∞·ª£c l·∫°i, sinh zombie th∆∞·ªùng
  const edge = Math.floor(Math.random() * 4);
  let x, y;
  if (edge === 0) { x = Math.random() * canvas.width; y = 0; }
  else if (edge === 1) { x = Math.random() * canvas.width; y = canvas.height; }
  else if (edge === 2) { x = 0; y = Math.random() * canvas.height; }
  else { x = canvas.width; y = Math.random() * canvas.height; }

  zombies.push({
    x,
    y,
    radius: 15,
    speed: 1,
    color: "green",
    hp: 3,
    type: "normal"
  });
}

function spawnMutantZombie() {
  const edge = Math.floor(Math.random() * 4);
  let x, y;
  if (edge === 0) { x = Math.random() * canvas.width; y = 0; }
  else if (edge === 1) { x = Math.random() * canvas.width; y = canvas.height; }
  else if (edge === 2) { x = 0; y = Math.random() * canvas.height; }
  else { x = canvas.width; y = Math.random() * canvas.height; }

  zombies.push({
    x,
    y,
    radius: 22,
    speed: 0.8,
    color: "darkred",
    hp: 45,
    maxHp: 30,
    type: "mutant"
  });
}

function updateZombieSpawnRate() {
  if (zombieSpawnInterval) clearInterval(zombieSpawnInterval);
  // N·∫øu c√≥ boss ‚Üí spawn ch·∫≠m l·∫°i
  const delay = boss ? 1500 : 500;
  zombieSpawnInterval = setInterval(spawnZombie, delay);
}

// Zombie di chuy·ªÉn  v·ªÅ ph√≠a player
function moveZombies() {
  for (let z of zombies) {
    const dx = player.x - z.x;
    const dy = player.y - z.y;
    const dist = Math.hypot(dx, dy);
    z.x += (dx / dist) * z.speed;
    z.y += (dy / dist) * z.speed;

    // Zombie ƒë·ªôt bi·∫øn ƒë·ªÉ l·∫°i l·ª≠a
    if (z.type === "mutant") {
      fireTrails.push({
        x: z.x,
        y: z.y,
        radius: 12,
        createdAt: Date.now()
      });
    }
    
    if (dist < player.radius + z.radius) {
     // Zombie ƒë·ªôt bi·∫øn g√¢y nhi·ªÅu s√°t th∆∞∆°ng h∆°n
    if (z.type === "mutant") {
      player.hp -= 0.5;
    } else {
      player.hp -= 0.1;
    }
    if (damageSound.paused) {
      damageSound.currentTime = 0;
      damageSound.play();
    }
}

  }
}

// K·ªπ nƒÉng Khi√™n
let isShieldActive = false;
let shieldDuration = 1500; // 1.5 gi√¢y hi·ªáu l·ª±c
let shieldCooldown = 10000; // 10 gi√¢y h·ªìi chi√™u
let lastShieldTime = -shieldCooldown; // ƒë·ªÉ c√≥ th·ªÉ d√πng ngay l√∫c ƒë·∫ßu n·∫øu mu·ªën
let shieldActivatedTime = 0;

const keys = {};
window.addEventListener("keydown", e => keys[e.key] = true);
window.addEventListener("keydown", e => {
  if (e.key === "g") {
    throwGrenade();
  }
  if (e.key === "t" || e.key === "T") {
    activateShield();
  }
});
window.addEventListener("keyup", e => keys[e.key] = false);

function throwGrenade() {
  if (ammo["Grenade"] > 0) {
    const angle = Math.atan2(lastMouse.y - player.y, lastMouse.x - player.x);
    grenades.push({
      x: player.x,
      y: player.y,
      radius: 6,
      dx: Math.cos(angle) * 4,
      dy: Math.sin(angle) * 4,
      timer: 1000,
      spawnTime: Date.now()
    });
    ammo["Grenade"]--;
  }
}

function movePlayer() {
  if (keys["w"] || keys["ArrowUp"]) player.y -= player.speed;
  if (keys["s"] || keys["ArrowDown"]) player.y += player.speed;
  if (keys["a"] || keys["ArrowLeft"]) player.x -= player.speed;
  if (keys["d"] || keys["ArrowRight"]) player.x += player.speed;

  // Gi·ªõi h·∫°n player trong canvas
  if (player.x - player.radius < 0) player.x = player.radius;
  if (player.x + player.radius > canvas.width) player.x = canvas.width - player.radius;
  if (player.y - player.radius < 0) player.y = player.radius;
  if (player.y + player.radius > canvas.height) player.y = canvas.height - player.radius;
}

function drawCircle(obj) {
  ctx.beginPath();
  ctx.arc(obj.x, obj.y, obj.radius, 0, Math.PI * 2);
  ctx.fillStyle = obj.color;
  ctx.fill();
}

function drawPlayer() {
  drawCircle(player);
}

function drawGun() {
    const mouseX = lastMouse.x;
    const mouseY = lastMouse.y;
    const angle = Math.atan2(mouseY - player.y, mouseX - player.x);
    ctx.save();
    ctx.translate(player.x, player.y);
    ctx.rotate(angle);

    // X·ª≠ l√Ω gi·∫≠t c·ªßa s√∫ng
    let currentGunOffset = 0;
    if (gunRecoil > 0) {
        currentGunOffset = -gunRecoil; // ƒê·∫©y s√∫ng v·ªÅ ph√≠a sau
    }
    ctx.fillStyle = "gray";
    ctx.fillRect(currentGunOffset, -5, 20, 10); // Th√¢n s√∫ng
    // M√†u c·ªßa ƒë·∫ßu n√≤ng
    let muzzleColor = "#4682B4";
    // Ki·ªÉm tra n·∫øu v·ª´a b·∫Øn (trong th·ªùi gian FLASH_DURATION c·ªßa v≈© kh√≠ hi·ªán t·∫°i)
    if (Date.now() - lastGunFireTime < WEAPON_FLASH_DURATION[currentWeapon]) {
        muzzleColor = "yellow";
    }
    ctx.fillStyle = muzzleColor;
    ctx.fillRect(20 + currentGunOffset, -2, 10, 4); // ƒê·∫ßu n√≤ng (thay ƒë·ªïi v·ªã tr√≠ theo offset)
    ctx.beginPath();
    ctx.arc(30 + currentGunOffset, 0, 3, 0, Math.PI * 2); // ƒê·∫ßu n√≤ng tr√≤n (thay ƒë·ªïi v·ªã tr√≠ theo offset)
    ctx.fillStyle = muzzleColor; // M√†u ƒë·∫ßu n√≤ng tr√≤n
    ctx.fill();
    ctx.restore();
}

function getMuzzleWorldPosition() {
  const angle = Math.atan2(lastMouse.y - player.y, lastMouse.x - player.x);
  const offsetX = 30; // ƒë√∫ng v·ªõi `ctx.fillRect(20, -2, 10, 4)` => ƒë·∫ßu n√≤ng n·∫±m ·ªü x = 30
  const offsetY = 0;  // v√¨ fillRect n·∫±m gi·ªØa tr·ª•c Y
  return {
    x: player.x + Math.cos(angle) * offsetX - Math.sin(angle) * offsetY,
    y: player.y + Math.sin(angle) * offsetX + Math.cos(angle) * offsetY
  };
}

// C√°ch h√†m ƒë·∫°n di chuy·ªÉn
function moveBullets() {
    const now = Date.now();
    for (let i = bullets.length - 1; i >= 0; i--) {
        const b = bullets[i];
        b.x += b.dx;
        b.y += b.dy;
        // Ki·ªÉm tra n·∫øu ƒë·∫°n shotgun v√† ƒë√£ h·∫øt th·ªùi gian t·ªìn t·∫°i
        if (b.lifeTime && (now - b.spawnTime > b.lifeTime)) {
            bullets.splice(i, 1);
            continue; // Chuy·ªÉn sang vi√™n ƒë·∫°n ti·∫øp theo sau khi x√≥a
        }
        // Ki·ªÉm tra n·∫øu ƒë·∫°n ra ngo√†i m√†n h√¨nh (√°p d·ª•ng cho t·∫•t c·∫£ c√°c lo·∫°i ƒë·∫°n)
        if (b.x < 0 || b.x > canvas.width || b.y < 0 || b.y > canvas.height) {
          if (b.type === "plasma") {
            plasmaSmallSound.pause();
            plasmaSmallSound.currentTime = 0;
          }
        bullets.splice(i, 1);
      }
    }
}

function spawnWeaponBox() {
  weaponBoxes.push({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    radius: 12,
    weapon: weapons[Math.floor(Math.random() * weapons.length)],
    spawnTime: Date.now() // ‚ûï Th√™m th·ªùi gian t·∫°o
  });
}
function spawnAmmoBox() {
  ammoBoxes.push({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    radius: 10,
    spawnTime: Date.now()
  });
}

// m·ªói 10 gi√¢y spawn 1 h·ªôp s√∫ng
setInterval(spawnWeaponBox, 10000);
setInterval(spawnAmmoBox, 7000);

// Spawn b√¨nh m√°u
const healthPacks = [];
function spawnHealthPack(x, y) {
  healthPacks.push({
    x,
    y,
    radius: 10,
    color: "limegreen",
    spawnTime: Date.now()
  });
}

function drawHealthPacks() {
  for (let pack of healthPacks) {
    ctx.beginPath();
    ctx.arc(pack.x, pack.y, pack.radius, 0, Math.PI * 2);
    ctx.fillStyle = pack.color;
    ctx.fill();
    ctx.strokeStyle = "white";
    ctx.stroke();

    ctx.fillStyle = "white";
    ctx.font = "10px sans-serif";
    ctx.textAlign = "center";
    ctx.fillText("+HP", pack.x, pack.y + 3);
  }
}

function handleHealthPackCollision() {
  for (let i = healthPacks.length - 1; i >= 0; i--) {
    const pack = healthPacks[i];
    const dist = Math.hypot(player.x - pack.x, player.y - pack.y);

    if (dist < player.radius + pack.radius) {
      player.hp = Math.min(player.hp + 20, player.maxHp); // H·ªìi 20 HP, kh√¥ng v∆∞·ª£t qu√° max
      healthPacksSound.currentTime = 0;
      healthPacksSound.play();
      healthPacks.splice(i, 1);

      notifications.push({
        lines: [
          { text: "+20 HP", color: "lime" }
        ],
        x: canvas.width / 2,
        y: canvas.height / 1.4,
        alpha: 1.0,
        startTime: Date.now(),
        duration: 1500
      });
    }
  }
}




// T·∫°o h√¨nh d√°ng h·ªôp s√∫ng 
function drawWeaponBoxes() {
  for (let box of weaponBoxes) {
    ctx.beginPath();
    ctx.arc(box.x, box.y, box.radius, 0, Math.PI * 2);
    ctx.fillStyle = "gold";
    ctx.fill();
    ctx.strokeStyle = "black";
    ctx.stroke();

    ctx.fillStyle = "black";
    ctx.font = "10px sans-serif";
    ctx.textAlign = "left";
    ctx.textBaseline = "alphabetic";
    ctx.fillText("Gun", box.x - 10, box.y + 3);
  }
}
// T·∫°o h√¨nh d√°ng h√≤m ƒë·∫°n 
function drawAmmoBoxes() {
  for (let box of ammoBoxes) {
    ctx.beginPath();
    ctx.arc(box.x, box.y, box.radius, 0, Math.PI * 2);
    ctx.fillStyle = "blue";
    ctx.fill();
    ctx.strokeStyle = "white";
    ctx.stroke();

    ctx.fillStyle = "white";
    ctx.font = "10px sans-serif";
    ctx.textAlign = "left";
    ctx.textBaseline = "alphabetic";
    ctx.fillText(" ƒê·∫°n", box.x - 12, box.y + 3);
  }
}

// X·ª≠ l√Ω va ch·∫°m gi·ªØa player v√† h·ªôp s√∫ng
function handleWeaponBoxCollision() {
    for (let i = weaponBoxes.length - 1; i >= 0; i--) {
        const box = weaponBoxes[i];
        const dx = player.x - box.x;
        const dy = player.y - box.y;
        const dist = Math.hypot(dx, dy);

        if (dist < player.radius + box.radius) {
            let weaponToEquip = box.weapon; // V≈© kh√≠ m√† h·ªôp s√∫ng ban ƒë·∫ßu cung c·∫•p

            // Ki·ªÉm tra n·∫øu v≈© kh√≠ trong h·ªôp tr√πng v·ªõi v≈© kh√≠ ƒëang d√πng
            if (weaponToEquip === currentWeapon) {
                // L·ªçc ra c√°c v≈© kh√≠ c√≤n l·∫°i (kh√¥ng bao g·ªìm v≈© kh√≠ hi·ªán t·∫°i v√† "Grenade")
                const availableWeapons = weapons.filter(weapon => weapon !== currentWeapon && weapon !== "Grenade");
                if (availableWeapons.length > 0) {
                    weaponToEquip = availableWeapons[Math.floor(Math.random() * availableWeapons.length)];
                } else {
                    // ƒê·ªÉ r·ªóng
                }
            }
            // C·∫≠p nh·∫≠t v≈© kh√≠ hi·ªán t·∫°i
            currentWeapon = weaponToEquip;
            // ‚õî N·∫øu ƒë·ªïi t·ª´ Plasma Rifle sang s√∫ng kh√°c khi ƒëang s·∫°c
            if (isChargingPlasma || plasmaChargeStarted || plasmaChargeAmount > 0) {
              isChargingPlasma = false;
              plasmaChargeStarted = false;
              plasmaChargeAmount = 0;
              plasmaChargeSound.pause();
              plasmaChargeSound.currentTime = 0;
            }
            ammo[currentWeapon] = weaponStats[currentWeapon].ammo; 
            reloadSound.play();
            // --- TH√äM D√íNG N√ÄY ƒê·ªÇ T·∫†O TH√îNG B√ÅO ---
            notifications.push({
                text: currentWeapon.toUpperCase(), // Chuy·ªÉn t√™n s√∫ng sang ch·ªØ hoa
                x: canvas.width / 2, // V·ªã tr√≠ gi·ªØa m√†n h√¨nh
                y: canvas.height / 1.3,
                alpha: 1.0, // ƒê·ªô m·ªù ban ƒë·∫ßu
                startTime: Date.now(),
                duration: 1500 // Th·ªùi gian hi·ªÉn th·ªã (1.5 gi√¢y)
            });
            // ------------------------------------
            weaponBoxes.splice(i, 1);
        }
    }
}

function handleAmmoBoxCollision() {
    for (let i = ammoBoxes.length - 1; i >= 0; i--) {
        const box = ammoBoxes[i];
        const dx = player.x - box.x;
        const dy = player.y - box.y;
        const dist = Math.hypot(dx, dy);

        if (justFiredBigPlasma) {
        justFiredBigPlasma = false;
        return; // Tho√°t kh·ªèi shootBullet, kh√¥ng b·∫Øn ƒë·∫°n nh·ªè
        }

        if (dist < player.radius + box.radius) {
            // Reset l·ª±u ƒë·∫°n v·ªÅ t·ªëi ƒëa
            ammo["Grenade"] = weaponStats["Grenade"].ammo;

            // C·ªông d·ªìn ƒë·∫°n n·∫øu kh√¥ng ph·∫£i l·ª±u ƒë·∫°n
            if (currentWeapon !== "Grenade") {
                const ammoToAdd = weaponStats[currentWeapon].ammoPerBox || 10;
                ammo[currentWeapon] += ammoToAdd; // C·ªông d·ªìn kh√¥ng gi·ªõi h·∫°n
            }

            reloadSound.currentTime = 0;
            reloadSound.play();
            ammoBoxes.splice(i, 1);
        }
    }
}

// H√†m t·∫°o h√¨nh d√°ng c·ªßa t·ª´ng vi√™n ƒë·∫°n 
function shootBullet(event) {
  const rect = canvas.getBoundingClientRect();
  const mouseX = event.clientX - rect.left;
  const mouseY = event.clientY - rect.top;
  const angle = Math.atan2(mouseY - player.y, mouseX - player.x);
  let canShoot = false; // Bi·∫øn c·ªù ƒë·ªÉ ki·ªÉm tra c√≥ th·ªÉ b·∫Øn hay kh√¥ng
  const muzzle = getMuzzleWorldPosition();

  if (currentWeapon === "Pistol" && ammo["Pistol"] > 0) {
    bullets.push({
      x: muzzle.x,
      y: muzzle.y,
      radius: 5,
      speed: 10,
      dx: Math.cos(angle) * 5,
      dy: Math.sin(angle) * 5,
      color: "yellow",
      damage: weaponStats[currentWeapon].damage,
      type: "pistol"
    });
    ammo["Pistol"]--;
    shootSound.currentTime = 0;
    shootSound.play();
    canShoot = true;
  } else if (currentWeapon === "Shotgun" && ammo["Shotgun"] > 0) {
    for (let i = -1; i <= 1; i++) {
      const spread = angle + i * 0.2;
      bullets.push({
        x: muzzle.x,
        y: muzzle.y,
        radius: 4,
        speed: 7,
        dx: Math.cos(spread) * 5,
        dy: Math.sin(spread) * 5,
        color: "orange",
        damage: weaponStats[currentWeapon].damage,
        type: "shotgun",
        lifeTime: 1000, // Th√™m d√≤ng n√†y: Th·ªùi gian t·ªìn t·∫°i c·ªßa ƒë·∫°n shotgun (ms)
        spawnTime: Date.now() // Th√™m d√≤ng n√†y: Th·ªùi ƒëi·ªÉm vi√™n ƒë·∫°n ƒë∆∞·ª£c t·∫°o ra
      });
    }
    ammo["Shotgun"]--;
    shotgunSound.currentTime = 0;
    shotgunSound.play();
    canShoot = true;
  } else if (currentWeapon === "Laser Gun" && ammo["Laser Gun"] > 0) {
    bullets.push({
      x: muzzle.x,
      y: muzzle.y,
      radius: 3,
      speed: 10,
      dx: Math.cos(angle) * 10,
      dy: Math.sin(angle) * 10,
      color: "cyan",
      type: "laser",
      damage: weaponStats[currentWeapon].damage
    });
    ammo["Laser Gun"]--;
    laserSound.currentTime = 0;
    laserSound.play();
    canShoot = true;
  } else if (currentWeapon === "Machine Gun" && ammo["Machine Gun"] > 0) {
    bullets.push({
      x: muzzle.x,
      y: muzzle.y,
      radius: 4,
      speed: 7,
      dx: Math.cos(angle) * 7,
      dy: Math.sin(angle) * 7,
      color: "red",
      damage: weaponStats["Machine Gun"].damage,
      type: "machinegun"
    });
    ammo["Machine Gun"]--;
    machineGunSound.currentTime = 0;
    machineGunSound.play();
  } // THAY TH·∫æ TO√ÄN B·ªò LOGIC PLASMA RIFLE B√äN TRONG shootBullet C≈® B·∫∞NG ƒêO·∫†N N√ÄY
else if (currentWeapon === "Plasma Rifle" && ammo["Plasma Rifle"] > 0 && !justFiredBigPlasma) {
    bullets.push({
      x: muzzle.x,
      y: muzzle.y,
      radius: 3,
      speed: 10,
      dx: Math.cos(angle) * 10,
      dy: Math.sin(angle) * 10,
      color: "yellow",
      type: "plasma",
      damage: weaponStats[currentWeapon].damage
    });
    ammo["Plasma Rifle"]--;
    laserSound.currentTime = 0;
    laserSound.play();
    plasmaSmallSound.currentTime = 0;
    plasmaSmallSound.play();
    canShoot = true;
  }
  else if (currentWeapon === "Grenade" && ammo["Grenade"] > 0) {
    grenades.push({
        x: player.x,
        y: player.y,
        radius: 6,
        dx: Math.cos(angle) * 4,
        dy: Math.sin(angle) * 4,
        timer: 700, // ph√°t n·ªï sau 700 ms gi√¢y
        spawnTime: Date.now()
  });
  ammo["Grenade"]--;
  canShoot = true;
    }
  if (canShoot && currentWeapon !== "Grenade") {
        gunRecoil = WEAPON_RECOIL_AMOUNT[currentWeapon]; // K√≠ch ho·∫°t gi·∫≠t theo t·ª´ng lo·∫°i s√∫ng
        lastGunFireTime = Date.now(); // Ghi l·∫°i th·ªùi ƒëi·ªÉm b·∫Øn
  }
}

// H√†m b·∫Øn ƒë·∫°n l·ªõn c·ªßa Plasma Rifle (ch·ªâ g·ªçi khi nh·∫£ chu·ªôt sau khi s·∫°c ƒë·ªß)
function shootBigPlasmaBullet(targetX, targetY) {
    const muzzle = getMuzzleWorldPosition();
    if (player.hp <= 0) return;

    // ƒê·∫°n l·ªõn ti√™u t·ªën 5 vi√™n ƒë·∫°n th∆∞·ªùng
    if (ammo["Plasma Rifle"] >= 2) {
        const angle = Math.atan2(targetY - player.y, targetX - player.x);
        bullets.push({
            x: muzzle.x,
            y: muzzle.y,
            radius: 12, // K√≠ch th∆∞·ªõc l·ªõn h∆°n cho ƒë·∫°n plasma m·∫°nh
            speed: 15, // T·ªëc ƒë·ªô cao h∆°n
            dx: Math.cos(angle) * 15,
            dy: Math.sin(angle) * 15,
            color: "deepskyblue", // M√†u xanh n∆∞·ªõc bi·ªÉn cho ƒë·∫°n l·ªõn
            damage: weaponStats["Plasma Rifle"].damage * 5, // G·∫•p ƒë√¥i s√°t th∆∞∆°ng ho·∫∑c h∆°n
            type: "plasma_big" // Lo·∫°i ƒë·∫°n l·ªõn
        });
        ammo["Plasma Rifle"] -= 2; // Ti√™u t·ªën 2 vi√™n ƒë·∫°n th∆∞·ªùng
        plasmaBigSound.currentTime = 0;
        plasmaBigSound.play();
        gunRecoil = WEAPON_RECOIL_AMOUNT["Plasma Rifle"] * 1.7; // Gi·∫≠t m·∫°nh h∆°n
        lastGunFireTime = Date.now();
    } else {
        // Th√¥ng b√°o khi kh√¥ng ƒë·ªß ƒë·∫°n l·ªõn v·∫´n ƒë∆∞·ª£c gi·ªØ l·∫°i
        notifications.push({
            // text: "KH√îNG ƒê·ª¶ ƒê·∫†N L·ªöN!",
            x: canvas.width / 2,
            y: canvas.height / 1.5,
            alpha: 1.0,
            startTime: Date.now(),
            duration: 1000,
            color: "255, 255, 0" // M√†u v√†ng
        });
    }
}
let lastMachineGunShot = 0;
const machineGunFireRate = 100; // 100 ms m·ªói vi√™n ~ 10 vi√™n/gi√¢y

// T√πy ch·ªânh h√†m x·ª≠ l√Ω va ch·∫°m gi·ªØa ƒë·∫°n v√† zombie 
function handleBulletZombieCollision() {
  for (let i = bullets.length - 1; i >= 0; i--) {
    const b = bullets[i];
      // ‚ûï Ki·ªÉm tra c·∫£ ƒë·∫°n Boss ph·∫£n l·∫°i
    if (!b.damage) continue; // B·ªè qua n·∫øu kh√¥ng c√≥ damage (ph√≤ng l·ªói)
    for (let j = zombies.length - 1; j >= 0; j--) {
      const z = zombies[j];
      const dx = b.x - z.x;
      const dy = b.y - z.y;
      const dist = Math.hypot(dx, dy);
      if (dist < b.radius + z.radius) {
        if (b.type === "plasma") {
          plasmaSmallSound.pause();
          plasmaSmallSound.currentTime = 0;
        }
        bullets.splice(i, 1);
        z.hp -= b.damage;
        hitSound.currentTime = 0;
        hitSound.play();
        damages.push({
        x: z.x,
        y: z.y,
        amount: b.damage,
        startTime: Date.now()
      });

  // if (z.hp <= 0) {
  //   zombies.splice(j, 1);
  //   score++;
  // }
  if (z.hp <= 0) {
  if (z.type === "mutant") {
    spawnShieldBox(z.x, z.y);
  }
  zombies.splice(j, 1);
  score++;
  }
  break;
}
    }
  }
}

// T·∫°o Nade (L·ª±u ƒë·∫°n)
function moveGrenades() {
  for (let g of grenades) {
    g.x += g.dx;
    g.y += g.dy;
  }
}

function handleGrenadeExplosions() {
  const now = Date.now();
  for (let i = grenades.length - 1; i >= 0; i--) {
    const g = grenades[i];
    if (now - g.spawnTime >= g.timer) {
      // Ph√°t n·ªï
      for (let j = zombies.length - 1; j >= 0; j--) {
        const z = zombies[j];
        const dist = Math.hypot(z.x - g.x, z.y - g.y);
        if (dist < 150) { // b√°n k√≠nh n·ªï
          const damage = 30; // ch·ªânh s√°t th∆∞∆°ng t√πy √Ω
          z.hp -= damage;

          // Hi·ªáu ·ª©ng s·ªë damage hi·ªán ra
          damages.push({
            x: z.x,
            y: z.y,
            amount: damage,
            startTime: Date.now()
          });

          if (z.hp <= 0) {
            zombies.splice(j, 1);
            score++;
            hitSound.currentTime = 0;
            hitSound.play();
          }
        }
      }
      explosionSound.currentTime = 0;
      explosionSound.play();
      explosions.push({
        x: g.x,
        y: g.y,
        radius: 0,
        maxRadius: 149,
        alpha: 1.0,
        createdAt: now
      });
      grenades.splice(i, 1);
    }
  }
}

function drawDamages() {
  const now = Date.now();
  for (let i = damages.length - 1; i >= 0; i--) {
    const d = damages[i];
    const elapsed = now - d.startTime;
    if (elapsed > 600) {
      damages.splice(i, 1); // xo√° sau 600ms
      continue;
    }
    const alpha = 1 - elapsed / 600;
    const yOffset = -elapsed / 10; // bay l√™n
    ctx.fillStyle = `rgba(255, 0, 0, ${alpha})`;
    ctx.font = "18px sans-serif";
    ctx.fillText("-" + d.amount, d.x, d.y + yOffset);
  }
}

function drawExplosions() {
  const now = Date.now();
  for (let i = explosions.length - 1; i >= 0; i--) {
    const ex = explosions[i];
    const elapsed = now - ex.createdAt;
    const progress = elapsed / 400; // hi·ªáu ·ª©ng k√©o d√†i 400ms
    ex.radius = ex.maxRadius * progress;
    ex.alpha = 1 - progress;

    if (progress >= 1) {
      explosions.splice(i, 1); // Xo√° khi xong hi·ªáu ·ª©ng
      continue;
    }
    ctx.beginPath();
    ctx.arc(ex.x, ex.y, ex.radius, 0, Math.PI * 2);
    ctx.fillStyle =  `rgba(255, 100, 100, ${ex.alpha})`; // cam m·ªù
    ctx.fill();
  }
}

function drawGrenades() {
  for (let g of grenades) {
    ctx.beginPath();
    ctx.arc(g.x, g.y, g.radius, 0, Math.PI * 2);
    ctx.fillStyle = "darkgray";
    ctx.fill();
  }
}

// Thanh m√°u (HP Bar)
function drawHPBar() {
  ctx.fillStyle = "red";
  ctx.fillRect(20, 20, 200, 20);
  ctx.fillStyle = "lime";
  ctx.fillRect(20, 20, (player.hp / 100) * 200, 20);
  ctx.strokeStyle = "white";
  ctx.lineWidth = 2;
  ctx.strokeRect(20, 20, 200, 20);
  ctx.fillStyle = "white";
  ctx.font = "16px sans-serif";
  ctx.textAlign = "left";
  ctx.fillText(Math.ceil(player.hp) + " / " + player.maxHp, 90, 35);
}

// Ghi ƒëi·ªÉm 
function drawScore() {
    ctx.textAlign = "left"; // ƒë·∫£m b·∫£o text n·∫±m s√°t tr√°i ƒë√∫ng v·ªã tr√≠
    ctx.fillStyle = "white";
    ctx.font = "20px sans-serif";
    ctx.fillText("Score: " + score, 20, 60);
    ctx.fillText("Bullet: " + ammo[currentWeapon], 20, 85);
    ctx.fillText("Grenade: " + ammo["Grenade"], 20, 110); // D√≤ng m·ªõi ƒë·ªÉ hi·ªÉn th·ªã s·ªë l·ª±u ƒë·∫°n
}

function drawDebugInfo() {
  ctx.fillStyle = "white";
  ctx.font = "16px sans-serif";
  ctx.textAlign = "left";
  ctx.fillText("S·ªë ƒë·∫°n c√≤n l·∫°i: " + bullets.length, 10, 20);
}


// ==================== T·∫†O BOSS ==================== 
let boss = null;
let nextBossScore = 20;       // ƒêi·ªÉm ƒë·ªÉ boss ƒë·∫ßu ti√™n xu·∫•t hi·ªán v·ªõi 20 ƒëi·ªÉm
const bossScoreStep = 200;     // Boss xu·∫•t hi·ªán m·ªói 150 ƒëi·ªÉm sau ƒë√≥
let bossBullets = [];
let bossShootInterval;
let bossCount = 0; // Bi·∫øn ƒë·∫øm s·ªë Boss ƒë√£ xu·∫•t hi·ªán

const bossColors = ["purple", "crimson", "darkorange", "GreenYellow", "#FF6A6A", "#97FFFF", "#FF3300", "#FFB90F"];
function spawnBoss() {
    bossCount++; // TƒÉng s·ªë l∆∞·ª£ng boss
    const bossName = `Z25-BOSS-${String(bossCount).padStart(2, '0')}`; // T√™n boss d·∫°ng Z25-BOSS-01, Z25-BOSS-02...
    const bossColor = bossColors[(bossCount - 1) % bossColors.length]; // ‚úÖ ƒê·ªïi m√†u d·ª±a v√†o bossCount
    // HP tƒÉng theo s·ªë boss
    const baseBossHP = 300;
    const extraHPPerBoss = 200;
    const bossHP = baseBossHP + (bossCount - 1) * extraHPPerBoss;
  boss = {
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    radius: 50,
    color: bossColor, // üëà g√°n m√†u m·ªõi
    hp: bossHP,
    speed: 0.5,
    name: bossName // üëà G√°n t√™n boss
  };
  // Th√¥ng b√°o xu·∫•t hi·ªán boss (bao g·ªìm t√™n boss)
  notifications.push({
    text: `üëπ ${bossName} XU·∫§T HI·ªÜN üëπ`,
    x: canvas.width / 2,
    y: canvas.height / 1.5,
    alpha: 1.0,
    startTime: Date.now(),
    duration: 2000,
    color: "255, 0, 0" // üëà m√†u ƒë·ªè (RGB)
  });
  bossAlertSound.currentTime = 0; // Ph√°t l·∫°i t·ª´ ƒë·∫ßu n·∫øu ƒë√£ ch∆°i tr∆∞·ªõc ƒë√≥
  bossAlertSound.play();
  // B·∫Øt ƒë·∫ßu interval b·∫Øn ƒë·∫°n
  bossShootInterval = setInterval(bossShoot, 1000);
  updateZombieSpawnRate(); // üëà TH√äM v√†o ƒë√¢y
}

function moveBoss() {
  if (!boss) return;
  const dx = player.x - boss.x;
  const dy = player.y - boss.y;
  const dist = Math.hypot(dx, dy);
  boss.x += (dx / dist) * boss.speed;
  boss.y += (dy / dist) * boss.speed;

  // Boss g√¢y s√°t th∆∞∆°ng n·∫øu ch·∫°m ng∆∞·ªùi ch∆°i
  if (dist < boss.radius + player.radius) {
    player.hp -= 0.3;
    if (damageSound.paused) {
      damageSound.currentTime = 0;
      damageSound.play();
    }
  }
}

function drawBoss() {
  if (!boss) return;
  ctx.beginPath();
  ctx.arc(boss.x, boss.y, boss.radius, 0, Math.PI * 2);
  ctx.fillStyle = boss.color;
  ctx.fill();
    // Hi·ªÉn th·ªã t√™n boss d∆∞·ªõi th√¢n n√≥
  if (boss.name) {
    ctx.fillStyle = "white";
    ctx.font = "14px Arial";
    ctx.textAlign = "center";
    ctx.fillText(boss.name, boss.x, boss.y + boss.radius + 18);
  }
}

function drawBossHPBar() {
  if (!boss) return;

  const barWidth = 400;
  const barHeight = 10;
  const barX = canvas.width / 2 - barWidth / 2;
  const barY = 60;

  // V·∫Ω n·ªÅn
  ctx.fillStyle = "rgba(65, 65, 65, 0.7)";
  ctx.fillRect(barX, barY, barWidth, barHeight);

  // T√≠nh ph·∫ßn trƒÉm m√°u boss (c·∫ßn l·∫•y theo boss.hp hi·ªán t·∫°i / max HP ban ƒë·∫ßu c·ªßa boss ƒë√≥)
  const bossMaxHP = 300 + (bossCount - 1) * 200;
  const hpPercent = boss.hp / bossMaxHP;

  // V·∫Ω ph·∫ßn m√°u c√≤n l·∫°i
  ctx.fillStyle = "crimson";
  ctx.fillRect(barX, barY, barWidth * hpPercent, barHeight);

  // Vi·ªÅn
  ctx.strokeStyle = "white";
  ctx.lineWidth = 2;
  ctx.strokeRect(barX, barY, barWidth, barHeight);

  // ‚úÖ Hi·ªÉn th·ªã s·ªë m√°u: v√≠ d·ª• "HP: 840 / 900"
  ctx.font = "14px Arial";
  ctx.textAlign = "center"; // reset ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng sau ƒë√≥
  ctx.fillText(`HP: ${Math.max(0, Math.ceil(boss.hp))} / ${bossMaxHP}`, barX + barWidth / 2, barY + barHeight + 16);
}

const bossDeathSound = new Audio("sound/evil_laugh.mp3");
bossDeathSound.load();
function handleBulletBossCollision() {
  if (!boss) return;

  for (let i = bullets.length - 1; i >= 0; i--) {
    const b = bullets[i];
    if (!b.damage) continue;
    const dx = b.x - boss.x;
    const dy = b.y - boss.y;
    const dist = Math.hypot(dx, dy);

    if (dist < b.radius + boss.radius) {
      bullets.splice(i, 1); // Xo√° ƒë·∫°n

      boss.hp -= b.damage;

      // Hi·ªán s·ªë s√°t th∆∞∆°ng
      damages.push({
        x: boss.x,
        y: boss.y,
        amount: b.damage,
        startTime: Date.now()
      });

      // Ph√°t √¢m thanh tr√∫ng ƒë·∫°n
      hitSound.currentTime = 0;
      hitSound.play();

      if (boss.hp <= 0) {
        spawnHealthPack(boss.x, boss.y);
        weaponStats["Grenade"].ammo++;
        // ‚ûï Th∆∞·ªüng 1 l·ª±u ƒë·∫°n khi ti√™u di·ªát Boss
      ammo["Grenade"]++;
      notifications.push({
      lines: [
        { text: "+1 √¥ ch·ª©a Grenade", color: "orange" }
      ],
      x: canvas.width / 2,
      y: canvas.height / 1.35,
      alpha: 1.0,
      startTime: Date.now(),
      duration: 2000
      });

        boss = null;
        score += 20;
        nextBossScore += bossScoreStep; // Chu·∫©n b·ªã cho l·∫ßn xu·∫•t hi·ªán boss ti·∫øp theo

        // Ng·ª´ng b·∫Øn ƒë·∫°n boss
        clearInterval(bossShootInterval);
        bossDeathSound.currentTime = 0;
        bossDeathSound.play(); 
        updateZombieSpawnRate(); // üëà Boss ƒë√£ ch·∫øt ‚Üí tr·ªü l·∫°i spawn nhanh
      }
      break; // M·ªôt vi√™n ƒë·∫°n ch·ªâ tr√∫ng 1 l·∫ßn
    }
  }
}

function handleGrenadeExplosions() {
  const now = Date.now();
  for (let i = grenades.length - 1; i >= 0; i--) {
    const g = grenades[i];
    if (now - g.spawnTime >= g.timer) {
      // Ph√°t n·ªï

      // X·ª≠ l√Ω zombie tr√∫ng n·ªï
      for (let j = zombies.length - 1; j >= 0; j--) {
        const z = zombies[j];
        const dist = Math.hypot(z.x - g.x, z.y - g.y);
        if (dist < 150) {
          const damage = 30;
          z.hp -= damage;

          damages.push({
            x: z.x,
            y: z.y,
            amount: damage,
            startTime: Date.now()
          });

          if (z.hp <= 0) {
            zombies.splice(j, 1);
            score++;
            hitSound.currentTime = 0;
            hitSound.play();
          }
        }
      }

      // X·ª≠ l√Ω boss tr√∫ng n·ªï
      if (boss) {
        const distBoss = Math.hypot(boss.x - g.x, boss.y - g.y);
        if (distBoss < 150) {
          const damage = 30;
          boss.hp -= damage;

          damages.push({
            x: boss.x,
            y: boss.y,
            amount: damage,
            startTime: Date.now()
          });

          if (boss.hp <= 0) {
            spawnHealthPack(boss.x, boss.y);  // ‚úÖ spawn b√¨nh m√°u
            weaponStats["Grenade"].ammo++; // ‚úÖ tƒÉng 1 √¥ ch·ª©a l·ª±u
            notifications.push({
            lines: [
              { text: "+1 √¥ ch·ª©a Grenade", color: "orange" }
            ],
            x: canvas.width / 2,
            y: canvas.height / 1.35,
            alpha: 1.0,
            startTime: Date.now(),
            duration: 2000
            });

            boss = null;
            clearInterval(bossShootInterval);
            score += 15; // th∆∞·ªüng ƒëi·ªÉm khi h·∫° boss, b·∫°n ch·ªânh t√πy √Ω
            updateZombieSpawnRate(); // ‚úÖ TH√äM D√íNG N√ÄY
            hitSound.currentTime = 0;
            hitSound.play();
            bossDeathSound.currentTime = 0; // Reset sound to beginning
            bossDeathSound.play();
          }
        }
      }
      explosionSound.currentTime = 0;
      explosionSound.play();
      explosions.push({
        x: g.x,
        y: g.y,
        radius: 0,
        maxRadius: 149,
        alpha: 1.0,
        createdAt: now
      });
      grenades.splice(i, 1);
    }
  }
}

function bossShoot() {
  if (!boss || !player) return;
  const numBullets = bossCount;

  // T√≠nh g√≥c b·∫Øn t·ª´ boss ƒë·∫øn player
  const angleToPlayer = Math.atan2(player.y - boss.y, player.x - boss.x);
  const spread = Math.PI / 12;
  const startAngle = angleToPlayer - (spread * (numBullets - 1) / 2);

  // T√≠nh t·ªëc ƒë·ªô ƒë·∫°n d·ª±a tr√™n s·ªë l∆∞·ª£ng ƒë·∫°n
  const baseSpeed = 5;
  const minSpeed = 2.5;
  const speed = Math.max(minSpeed, baseSpeed - (numBullets - 1) * 0.6); // üëà Gi·∫£m t·ªëc ƒë·ªô theo s·ªë ƒë·∫°n

    // T·∫°o c√°c vi√™n ƒë·∫°n boss
  for (let i = 0; i < numBullets; i++) {
    const angle = startAngle + i * spread;
    const bullet = {
      x: boss.x,
      y: boss.y,
      speed: speed,
      dx: Math.cos(angle),
      dy: Math.sin(angle),
      radius: 5,
      damage: 10 // ‚ûï th√™m d√≤ng n√†y
    };
    bossBullets.push(bullet);
  }
}

// T∆∞∆°ng t√°c v·ªõi ƒë·∫°n c·ªßa boss
function updateBossBullets() {
  bossBullets.forEach((bullet, index) => {
    // C·∫≠p nh·∫≠t v·ªã tr√≠ ƒë·∫°n
    bullet.x += bullet.dx * bullet.speed;
    bullet.y += bullet.dy * bullet.speed;

    const dist = Math.hypot(player.x - bullet.x, player.y - bullet.y);
    const shieldRadius = isShieldActive ? player.radius + 20 : player.radius;

    if (dist < shieldRadius + bullet.radius) {
      if (isShieldActive && !bullet.reflected && dist >= shieldRadius - bullet.radius) {
        // ‚úÖ Ph·∫£n x·∫° v·∫≠t l√Ω n·∫øu ƒë·∫°n ch·∫°m m√©p ngo√†i c·ªßa khi√™n

        const normalX = (bullet.x - player.x) / dist;
        const normalY = (bullet.y - player.y) / dist;
        const dot = bullet.dx * normalX + bullet.dy * normalY;

        bullet.dx = bullet.dx - 2 * dot * normalX;
        bullet.dy = bullet.dy - 2 * dot * normalY;

        // ƒê·∫©y ƒë·∫°n ra kh·ªèi v√πng khi√™n ƒë·ªÉ kh√¥ng b·ªã l·∫∑p ph·∫£n
        bullet.x = player.x + normalX * (shieldRadius + bullet.radius + 1);
        bullet.y = player.y + normalY * (shieldRadius + bullet.radius + 1);

        bullet.reflected = true;

      // ‚ûï Chuy·ªÉn ƒë·∫°n v√†o m·∫£ng bullets
      bullets.push({
      x: bullet.x,
      y: bullet.y,
      dx: bullet.dx * bullet.speed,
      dy: bullet.dy * bullet.speed,
      radius: bullet.radius,
      speed: bullet.speed,
      damage: bullet.damage,
      color: "#0066FF", // ho·∫∑c "cyan" cho d·ªÖ nh√¨n
      type: "boss_reflected"
    });

      // ‚ûñ Xo√° kh·ªèi bossBullets
      bossBullets.splice(index, 1);

      } else if (!isShieldActive) {
        player.hp -= 10;
        bossBullets.splice(index, 1);
      }
    }
    // Xo√° ƒë·∫°n n·∫øu ra ngo√†i m√†n h√¨nh
    if (
      bullet.x < 0 || bullet.x > canvas.width ||
      bullet.y < 0 || bullet.y > canvas.height
    ) {
      bossBullets.splice(index, 1);
    }
  });
}


// V·∫Ω ƒë·∫°n c·ªßa boss
function drawBossBullets() {
    bossBullets.forEach(bullet => {
        ctx.beginPath();
        ctx.arc(bullet.x, bullet.y, bullet.radius, 0, Math.PI * 2);
        ctx.fillStyle = 'red';
        ctx.fill();
        ctx.closePath();
    });
}


// ====================== CHI√äU TH·ª®C ======================= 
function startDash() {
    const now = Date.now();
    // Ch·ªâ cho ph√©p dash n·∫øu kh√¥ng ƒëang dash v√† h·ªìi chi√™u ƒë√£ qua
    if (!isDashing && (now - lastDashTime >= dashCooldown)) {
        isDashing = true;
        lastDashTime = now;
        // TƒÉng t·ªëc ƒë·ªô ng∆∞·ªùi ch∆°i
        player.speed *= dashSpeedMultiplier;

        if (dashSound.paused) { 
          dashSound.currentTime = 0;
          dashSound.play();
        }
        // ƒê·∫∑t timeout ƒë·ªÉ k·∫øt th√∫c dash sau dashDuration
        setTimeout(() => {
            isDashing = false;
            player.speed /= dashSpeedMultiplier; // Tr·∫£ l·∫°i t·ªëc ƒë·ªô ban ƒë·∫ßu
        }, dashDuration);
    }
}

function updateDash() {
    if (isDashing) {
        // T·∫°o h·∫°t kh√≥i ph√≠a sau ng∆∞·ªùi ch∆°i (h∆∞·ªõng ng∆∞·ª£c l·∫°i v·ªõi h∆∞·ªõng di chuy·ªÉn)
        // ƒê√¢y l√† c√°ch ƒë∆°n gi·∫£n, n·∫øu mu·ªën ch√≠nh x√°c h∆°n, b·∫°n c·∫ßn bi·∫øt h∆∞·ªõng player ƒëang di chuy·ªÉn
        // Hi·ªán t·∫°i, ch√∫ng ta t·∫°o ng·∫´u nhi√™n xung quanh player.
        for (let i = 0; i < PARTICLE_COUNT_PER_FRAME; i++) { // S·ª≠ d·ª•ng bi·∫øn m·ªõi
            const angle = Math.random() * Math.PI * 2; // G√≥c ng·∫´u nhi√™n
            const offsetRadius = player.radius * 0.8; // Offset ƒë·ªÉ kh√≥i kh√¥ng tr√πng player
            particles.push({
                x: player.x - Math.cos(angle) * offsetRadius,
                y: player.y - Math.sin(angle) * offsetRadius,
                radius: Math.random() * (PARTICLE_RADIUS_MAX - PARTICLE_RADIUS_MIN) + PARTICLE_RADIUS_MIN, // K√≠ch th∆∞·ªõc h·∫°t kh√≥i ng·∫´u nhi√™n
                color: "rgba(153, 153, 153, 0.76)", // M√†u kh√≥i (x√°m m·ªù)
                // Di chuy·ªÉn h·∫°t kh√≥i nh·∫π nh√†ng, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô n√†y ƒë·ªÉ kh√≥i 'bay' xa h∆°n
                dx: (Math.random() - 0.5) * PARTICLE_SPEED_MULTIPLIER,
                dy: (Math.random() - 0.5) * PARTICLE_SPEED_MULTIPLIER,
                alpha: 1, // ƒê·ªô trong su·ªët ban ƒë·∫ßu
                decay: PARTICLE_DECAY_RATE, // T·ªëc ƒë·ªô m·ªù d·∫ßn
                shrink: PARTICLE_SHRINK_RATE // T·ªëc ƒë·ªô nh·ªè d·∫ßn
            });
        }
    }

    // C·∫≠p nh·∫≠t v√† x√≥a c√°c h·∫°t kh√≥i
    for (let i = particles.length - 1; i >= 0; i--) {
        const p = particles[i];
        p.x += p.dx;
        p.y += p.dy;
        p.alpha -= p.decay;
        p.radius -= p.shrink; // S·ª≠ d·ª•ng bi·∫øn m·ªõi

        if (p.alpha <= 0 || p.radius <= 0) {
            particles.splice(i, 1);
        }
    }
}

// ====================== KHI√äN B·∫¢O V·ªÜ =======================
const shieldBoxes = [];
let lastShieldUpdateNote = ""; // nh·∫≠t k√Ω thay ƒë·ªïi m·ªõi nh·∫•t


function activateShield() {
  if (!isShieldActive && Date.now() - lastShieldTime >= shieldCooldown) {
    isShieldActive = true;
    shieldActivatedTime = Date.now();

    // üîä √Çm thanh b·∫≠t khi√™n
    shieldActivateSound.currentTime = 0;
    shieldActivateSound.play();
    // üî• Xo√° to√†n b·ªô ƒë·∫°n boss g·∫ßn player (trong b√°n k√≠nh 120px)
    const shieldRadius = player.radius + 120;
    for (let i = bossBullets.length - 1; i >= 0; i--) {
      const b = bossBullets[i];
      const dx = b.x - player.x;
      const dy = b.y - player.y;
      const dist = Math.hypot(dx, dy);
      if (dist < shieldRadius) {
        bossBullets.splice(i, 1);
      }
    }

    // ‚è≥ Khi√™n t·ª± t·∫Øt sau v√†i gi√¢y ‚Üí b·∫Øt ƒë·∫ßu h·ªìi chi√™u t·∫°i ƒë√¢y
    setTimeout(() => {
      isShieldActive = false;
      lastShieldTime = Date.now(); // üí° H·ªìi chi√™u b·∫Øt ƒë·∫ßu khi khi√™n t·∫Øt
    }, shieldDuration);
  }
}

function drawShield() {
  if (!isShieldActive) return;

  const gradient = ctx.createRadialGradient(
    player.x,
    player.y,
    player.radius,
    player.x,
    player.y,
    player.radius + 20
  );
  gradient.addColorStop(0, "rgba(0, 255, 255, 0.15)");
  gradient.addColorStop(0.6, "rgba(0, 200, 255, 0.25)");
  gradient.addColorStop(1, "rgba(0, 160, 255, 0.6)");

  // V√≤ng glow ngo√†i
  ctx.beginPath();
  ctx.arc(player.x, player.y, player.radius + 20, 0, Math.PI * 2);
  ctx.fillStyle = gradient;
  ctx.fill();

  // Vi·ªÅn ngo√†i s√°ng tr·∫Øng m·ªù
  ctx.beginPath();
  ctx.arc(player.x, player.y, player.radius + 20, 0, Math.PI * 2);
  ctx.strokeStyle = "rgba(255, 255, 255, 0.3)";
  ctx.lineWidth = 2;
  ctx.stroke();

  // Vi·ªÅn trong nƒÉng l∆∞·ª£ng
  ctx.beginPath();
  ctx.arc(player.x, player.y, player.radius + 14, 0, Math.PI * 2);
  ctx.strokeStyle = "rgba(0, 255, 255, 0.7)";
  ctx.lineWidth = 3;
  ctx.stroke();

  // üëâ V·∫Ω thanh th·ªùi l∆∞·ª£ng l√° ch·∫Øn b√™n d∆∞·ªõi
  const now = Date.now();
  const elapsed = now - shieldActivatedTime;
  const remaining = Math.max(0, shieldDuration - elapsed);
  const percent = remaining / shieldDuration;

  const barWidth = 60;
  const barHeight = 6;
  const barX = player.x - barWidth / 2;
  const barY = player.y + player.radius + 26; // d∆∞·ªõi khi√™n m·ªôt ch√∫t

  // N·ªÅn thanh
  ctx.fillStyle = "rgba(100,100,100,0.6)";
  ctx.fillRect(barX, barY, barWidth, barHeight);

  // Ph·∫ßn c√≤n l·∫°i
  ctx.fillStyle = "rgba(0,255,255,0.9)";
  ctx.fillRect(barX, barY, barWidth * percent, barHeight);

  // Vi·ªÅn tr·∫Øng
  ctx.strokeStyle = "white";
  ctx.lineWidth = 1;
  ctx.strokeRect(barX, barY, barWidth, barHeight);
}


function drawShieldCooldownBar() {
    const now = Date.now();
    const elapsed = now - lastShieldTime;
    let cooldownProgress = elapsed / shieldCooldown;
    if (cooldownProgress > 1) cooldownProgress = 1;

    const barWidth = 150;
    const barHeight = 15;
    const barX = canvas.width - barWidth - 20;
    const barY = 45;

    ctx.fillStyle = "gray";
    ctx.fillRect(barX, barY, barWidth, barHeight);

    ctx.fillStyle = cooldownProgress === 1 ? "#FF3366" : "#0000FF";
    ctx.fillRect(barX, barY, barWidth * cooldownProgress, barHeight);

    ctx.strokeStyle = "white";
    ctx.lineWidth = 2;
    ctx.strokeRect(barX, barY, barWidth, barHeight);

    ctx.fillStyle = "white";
    ctx.font = "14px Arial";
    ctx.textAlign = "center";
    ctx.fillText("SHIELD", barX + barWidth / 2, barY + barHeight - 2);
}

function updateShieldPanel() {
  const panel = document.getElementById("shield-status-panel");

  // Lu√¥n l·∫•y gi√° tr·ªã th·ª±c t·∫ø m·ªõi nh·∫•t
  const currentDuration = (shieldDuration / 1000).toFixed(1) + " gi√¢y";
  const currentCooldown = (shieldCooldown / 1000).toFixed(1) + " gi√¢y";

  // Ghi nh·ªõ thay ƒë·ªïi g·∫ßn nh·∫•t
  const recentUpdate = lastShieldUpdateNote || "Kh√¥ng c√≥ c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y.";

  panel.innerHTML =
    `<strong style="color: #FFD700">------ Tr·∫°ng th√°i hi·ªán t·∫°i ------</strong><br>` +
    `+) Th·ªùi gian s·ª≠ d·ª•ng Shield: ${currentDuration}<br>` +
    `+) Th·ªùi gian h·ªìi Shield: ${currentCooldown}<br><br>` +
    `<strong style="color: #FFD700">---------- V·ª´a c·∫≠p nh·∫≠t ---------</strong><br>` +
    recentUpdate;
}


function drawShieldBoxes() {
  for (let box of shieldBoxes) {
    ctx.beginPath();
    ctx.arc(box.x, box.y, box.radius, 0, Math.PI * 2);
    ctx.fillStyle = box.color;
    ctx.fill();
    ctx.strokeStyle = "white";
    ctx.lineWidth = 2;
    ctx.stroke();

    ctx.fillStyle = "white";
    ctx.font = "10px sans-serif";
    ctx.textAlign = "center";
    ctx.fillText("S+", box.x, box.y + 3);
  }
}

function handleShieldBoxCollision() {
  for (let i = shieldBoxes.length - 1; i >= 0; i--) {
    const box = shieldBoxes[i];
    const dist = Math.hypot(player.x - box.x, player.y - box.y);

  if (dist < player.radius + box.radius) {
  const oldCooldown = Number(shieldCooldown);
  const oldDuration = Number(shieldDuration);

  // Gi·ªõi h·∫°n cooldown kh√¥ng nh·ªè h∆°n 2.5s (2500ms), v√† th·ªùi gian s·ª≠ d·ª•ng kh√¥ng v∆∞·ª£t qu√° 8s (8000ms)
  shieldCooldown = Math.max(2500, oldCooldown - 200); // gi·∫£m 0.2s nh∆∞ng kh√¥ng th·∫•p h∆°n 2.5s
  shieldDuration = Math.min(8000, oldDuration + 100); // tƒÉng 0.1s nh∆∞ng kh√¥ng v∆∞·ª£t qu√° 8.0s

  const cdChange = ((shieldCooldown - oldCooldown) / 1000).toFixed(1);
  const durChange = ((shieldDuration - oldDuration) / 1000).toFixed(1);

  // N·∫øu v√¨ l√Ω do n√†o ƒë√≥ cdChange ho·∫∑c durChange l√† NaN ‚Üí b·ªè qua c·∫≠p nh·∫≠t
  if (isNaN(cdChange) || isNaN(durChange)) return;

  lastShieldUpdateNote =
    `<span style="color:deepskyblue;">üõ°Ô∏è Shield Time:</span> ` +
    `<span style="color:${durChange > 0 ? 'lime' : 'red'};">${durChange > 0 ? "+ " : "- "}${Math.abs(durChange)}s</span> ` +
    `(${(oldDuration / 1000).toFixed(1)} ‚Üí ${(shieldDuration / 1000).toFixed(1)})<br>` +

    `<span style="color:orange;">‚è±Ô∏è Cooldown:</span> ` +
    `<span style="color:${cdChange > 0 ? 'lime' : 'red'};">${cdChange > 0 ? "+ " : "- "}${Math.abs(cdChange)}s</span> ` +
    `(${(oldCooldown / 1000).toFixed(1)} ‚Üí ${(shieldCooldown / 1000).toFixed(1)})`;

    // üîä Ph√°t √¢m thanh b√∫a ƒë·∫≠p
  shieldBoostSound.currentTime = 0;
  shieldBoostSound.play();
  reloadSound.play();
  
  const durDisplay = `${durChange > 0 ? "+" : "-"}${Math.abs(durChange)}s shield time`;
  const cdDisplay = `${cdChange > 0 ? "+" : "-"}${Math.abs(cdChange)}s cooldown`;

  notifications.push({
  lines: [
    { text: "BOOST SHIELD", color: "white" },
    { text: `${durChange > 0 ? "+" : "-"}${Math.abs(durChange)}s shield time`, color: "lime" },
    { text: `${cdChange > 0 ? "+" : "-"}${Math.abs(cdChange)}s cooldown`, color: "red" }
  ],
  x: canvas.width / 2,
  y: canvas.height / 1.35,
  alpha: 1.0,
  startTime: Date.now(),
  duration: 2000
});


  shieldBoxes.splice(i, 1);
  }


  }
}

function spawnShieldBox(x, y) {
  shieldBoxes.push({
    x,
    y,
    radius: 10,
    color: "mediumorchid", // ho·∫∑c "limegreen" t√πy b·∫°n
    spawnTime: Date.now()
  });
}



function drawParticles() {
    for (let p of particles) {
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(255, 120, 0, ${p.alpha})`;
        ctx.fill();
    }
}

function drawSpeedBar() {
    const now = Date.now();
    const elapsed = now - lastDashTime;
    let cooldownProgress = elapsed / dashCooldown; // T·ª∑ l·ªá ƒë√£ h·ªìi chi√™u (0 ƒë·∫øn 1)

    // ƒê·∫£m b·∫£o progress kh√¥ng v∆∞·ª£t qu√° 1 (ƒë√£ h·ªìi chi√™u ho√†n to√†n)
    if (cooldownProgress > 1) {
        cooldownProgress = 1;
    }

    const barWidth = 150; // Chi·ªÅu r·ªông c·ªßa thanh Speed Bar
    const barHeight = 15; // Chi·ªÅu cao c·ªßa thanh Speed Bar
    const barX = canvas.width - barWidth - 20; // V·ªã tr√≠ X (c√°ch c·∫°nh ph·∫£i 20px)
    const barY = 20; // V·ªã tr√≠ Y (c√°ch c·∫°nh d∆∞·ªõi 20px)

    // V·∫Ω n·ªÅn thanh Speed Bar
    ctx.fillStyle = "gray";
    ctx.fillRect(barX, barY, barWidth, barHeight);

    // X√°c ƒë·ªãnh m√†u c·ªßa thanh progress
    let progressBarColor = "deepskyblue"; // M·∫∑c ƒë·ªãnh l√† xanh da tr·ªùi
    if (cooldownProgress === 1) { // N·∫øu ƒë√£ h·ªìi chi√™u ho√†n to√†n
        progressBarColor = "#c619f5"; // Chuy·ªÉn sang m√†u t√≠m
    }

    // V·∫Ω ph·∫ßn ƒë√£ h·ªìi chi√™u v·ªõi m√†u ƒë√£ ch·ªçn
    ctx.fillStyle = progressBarColor;
    ctx.fillRect(barX, barY, barWidth * cooldownProgress, barHeight);

    // V·∫Ω vi·ªÅn thanh Speed Bar
    ctx.strokeStyle = "white";
    ctx.lineWidth = 2;
    ctx.strokeRect(barX, barY, barWidth, barHeight);

    // Hi·ªÉn th·ªã ch·ªØ "SPEED"
    ctx.fillStyle = "white";
    ctx.font = "14px Arial";
    ctx.textAlign = "center";
    ctx.fillText("SPEED", barX + barWidth / 2, barY + barHeight - 2);
    ctx.textAlign = "left"; // Reset l·∫°i alignment ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng c√°c text kh√°c
}

function drawNotifications() {
  const now = Date.now();
  for (let i = notifications.length - 1; i >= 0; i--) {
    const notif = notifications[i];
    const elapsed = now - notif.startTime;

    if (elapsed > notif.duration) {
      notifications.splice(i, 1);
      continue;
    }

    const alpha = 1 - (elapsed / notif.duration);

    ctx.save();
    ctx.globalAlpha = alpha;
    ctx.font = "bold 24px Arial";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";

    const lineHeight = 28;
    const lines = notif.lines || [{ text: notif.text, color: "white" }];
    const totalHeight = lineHeight * lines.length;
    const startY = notif.y - totalHeight / 2;

    lines.forEach((line, j) => {
      ctx.fillStyle = line.color || "white";
      ctx.fillText(line.text, notif.x, startY + j * lineHeight);
    });

    ctx.restore();
  }
}




document.addEventListener("contextmenu", function(e) {
  e.preventDefault();
});

// H√†m g·ªçi t·∫•t c·∫£ m·ªçi th·ª©
function update() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  movePlayer();
  moveZombies();
  moveBullets();
  moveGrenades();
  drawExplosions();
  drawDamages(); 
  handleGrenadeExplosions();
  drawGrenades();
  handleBulletZombieCollision();
  drawPlayer();
  drawShield();
  drawHPBar();
  drawScore();
  drawGun();
  handleWeaponBoxCollision();
  handleAmmoBoxCollision();
  handleBulletBossCollision();
  updateBossBullets();
  drawBossBullets();
  if (score >= nextBossScore && !boss) {
  spawnBoss();
  nextBossScore += bossScoreStep;
}
moveBoss();
drawBoss();
drawBossHPBar();
updateDash();
drawParticles(); // V·∫Ω c√°c h·∫°t kh√≥i
updateShieldPanel();
drawShieldBoxes();
handleShieldBoxCollision();
drawHealthPacks();
handleHealthPackCollision();
// Xo√° b√¨nh m√°u sau 60 gi√¢y
for (let i = healthPacks.length - 1; i >= 0; i--) {
  if (Date.now() - healthPacks[i].spawnTime > 60000) {
    healthPacks.splice(i, 1);
  }
}


for (let i = shieldBoxes.length - 1; i >= 0; i--) {
  if (Date.now() - shieldBoxes[i].spawnTime > 7000) {
    shieldBoxes.splice(i, 1);
  }
}


// ‚ûï X√≥a h·ªôp s√∫ng sau 8 gi√¢y
const now = Date.now();
for (let i = weaponBoxes.length - 1; i >= 0; i--) {
  if (now - weaponBoxes[i].spawnTime > 8000) {
    weaponBoxes.splice(i, 1);
  }
}
for (let i = ammoBoxes.length - 1; i >= 0; i--) {
  if (now - ammoBoxes[i].spawnTime > 8000) {
    ammoBoxes.splice(i, 1);
  }
}
  drawWeaponBoxes();
  drawAmmoBoxes();
for (let z of zombies) drawCircle(z);
//   for (let b of bullets) drawCircle(b);
for (let b of bullets) {
  if (b.type === "laser") {
    const angle = Math.atan2(b.dy, b.dx);
    const length = 35;
    const width = 3;
    ctx.save();
    ctx.translate(b.x, b.y);
    ctx.rotate(angle);
    ctx.fillStyle = b.color;
    ctx.fillRect(0, -width / 2, length, width);
    ctx.restore();

  } else if (b.type === "plasma") {
  const segments = 6; // S·ªë ƒëo·∫°n g·∫•p kh√∫c
  const angle = Math.atan2(b.dy, b.dx);
  const length = 30; // ƒê·ªô d√†i t·ªïng th·ªÉ c·ªßa tia
  const segmentLength = length / segments;

  let x = b.x - Math.cos(angle) * length; // ƒëi·ªÉm ƒë·∫ßu (ƒëu√¥i)
  let y = b.y - Math.sin(angle) * length;

  ctx.strokeStyle = "rgba(255, 251, 0, 0.95)"; // M√†u ƒëi·ªán xanh
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(x, y);

  // V·∫Ω c√°c ƒëo·∫°n zig-zag
  for (let i = 1; i <= segments; i++) {
    const offset = (Math.random() - 0.5) * 8; // ƒê·ªô l·ªách ngang
    x += Math.cos(angle) * segmentLength;
    y += Math.sin(angle) * segmentLength;

    const perpAngle = angle + Math.PI / 2; // g√≥c vu√¥ng
    const px = x + Math.cos(perpAngle) * offset;
    const py = y + Math.sin(perpAngle) * offset;

    ctx.lineTo(px, py);
  }
  ctx.stroke();

  // Th√™m qu·∫ßng s√°ng nh·ªè ·ªü ƒë·∫ßu ƒë·∫°n (nh∆∞ ƒë·∫ßu tia s√©t)
  const glow = ctx.createRadialGradient(b.x, b.y, 0, b.x, b.y, 8);
  glow.addColorStop(0, "rgba(0, 255, 255, 0.94)");
  glow.addColorStop(1, "rgba(0, 255, 255, 0)");
  ctx.fillStyle = glow;
  ctx.beginPath();
  ctx.arc(b.x, b.y, 8, 0, Math.PI * 2);
  ctx.fill();
}
 else if (b.type === "plasma_big") {
    const width = 38;
    const height = 14;

    // Plasma l·ªõn ‚Äì glowing explosion ball
    const glowGradient = ctx.createRadialGradient(b.x, b.y, 0, b.x, b.y, b.radius * 4);
    glowGradient.addColorStop(0, "rgb(0, 183, 255)");
    glowGradient.addColorStop(0.5, "rgba(0, 132, 255, 0.5)");
    glowGradient.addColorStop(1, "rgba(255,0,0,0)");
    ctx.fillStyle = glowGradient;
    ctx.save();
    ctx.translate(b.x, b.y);
    const angle = Math.atan2(b.dy, b.dx);
    ctx.rotate(angle);

    ctx.beginPath();
    const radius = 6;
    ctx.moveTo(-width/2 + radius, -height/2);
    ctx.lineTo(width/2 - radius, -height/2);
    ctx.quadraticCurveTo(width/2, -height/2, width/2, -height/2 + radius);
    ctx.lineTo(width/2, height/2 - radius);
    ctx.quadraticCurveTo(width/2, height/2, width/2 - radius, height/2);
    ctx.lineTo(-width/2 + radius, height/2);
    ctx.quadraticCurveTo(-width/2, height/2, -width/2, height/2 - radius);
    ctx.lineTo(-width/2, -height/2 + radius);
    ctx.quadraticCurveTo(-width/2, -height/2, -width/2 + radius, -height/2);
    ctx.closePath();
    ctx.fillStyle = "#30c6f0";
    ctx.fill();
    ctx.restore();

    // Vi·ªÅn nh·∫•p nh√°y tr·∫Øng
    ctx.strokeStyle = "rgba(25, 86, 219, 0.5)";
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.arc(b.x, b.y, b.radius * 2, 0, Math.PI * 2);
    ctx.stroke();

    // üåü Hi·ªáu ·ª©ng h√†o quang nƒÉng l∆∞·ª£ng t·ªèa ra
    const halo = ctx.createRadialGradient(b.x, b.y, 0, b.x, b.y, b.radius * 4.5);
    halo.addColorStop(0, "rgba(0, 255, 255, 0.25)");
    halo.addColorStop(0.4, "rgba(0, 160, 255, 0.15)");
    halo.addColorStop(0.8, "rgba(0, 100, 255, 0.05)");
    halo.addColorStop(1, "rgba(0, 0, 0, 0)");
    ctx.beginPath();
    ctx.arc(b.x, b.y, b.radius * 4.5, 0, Math.PI * 2);
    ctx.fillStyle = halo;
    ctx.fill();

    const pulse = 0.5 + 0.5 * Math.sin(Date.now() / 120);
    ctx.globalAlpha = pulse * 0.5;
    ctx.beginPath();
    ctx.arc(b.x, b.y, b.radius * (3.5 + pulse), 0, Math.PI * 2);
    ctx.fillStyle = "rgba(0, 200, 255, 0.1)";
    ctx.fill();
    ctx.globalAlpha = 1.0;

    // üëá Trail (v·ªát s√°ng ƒëu√¥i)
    for (let t = 0; t < 6; t++) {
      const trailX = b.x - b.dx * t * 1.8;
      const trailY = b.y - b.dy * t * 1.8;
      const alpha = 0.2 - t * 0.03;
      ctx.beginPath();
      ctx.arc(trailX, trailY, 6 - t, 0, Math.PI * 2);
      ctx.fillStyle = `rgba(0, 200, 255, ${alpha})`;
      ctx.fill();
    }
  }else {
    // ‚úÖ V·∫Ω c√°c lo·∫°i ƒë·∫°n m·∫∑c ƒë·ªãnh c√≤n l·∫°i nh∆∞ Pistol, Shotgun, Machine Gun
    drawCircle(b);
  }
}

// B·∫Øn li√™n thanh khi gi·ªØ chu·ªôt v√† d√πng Machine Gun
if (currentWeapon === "Machine Gun" && isMouseDown && player.hp > 0 && ammo["Machine Gun"] > 0 && !justFiredBigPlasma) {
  const muzzle = getMuzzleWorldPosition();
  const now = Date.now();
  if (now - lastMachineGunShot > machineGunFireRate) {
    const angle = Math.atan2(lastMouse.y - player.y, lastMouse.x - player.x);
    bullets.push({
      x: muzzle.x,
      y: muzzle.y,
      radius: 4,
      speed: 7,
      dx: Math.cos(angle) * 7,
      dy: Math.sin(angle) * 7,        
      color: "red",
      damage: weaponStats["Machine Gun"].damage,
      type: "machinegun"
    });
    ammo["Machine Gun"]--;
    lastMachineGunShot = now;
    machineGunSound.currentTime = 0;
    machineGunSound.play();

    // K√≠ch ho·∫°t hi·ªáu ·ª©ng gi·∫≠t v√† ch·ªõp v√†ng cho Machine Gun
    gunRecoil = WEAPON_RECOIL_AMOUNT[currentWeapon];
    lastGunFireTime = Date.now();
  }
}
if (justFiredBigPlasma) {
    justFiredBigPlasma = false;
}

let gameOver = false;
let gameOverTime = 0;
if (player.hp <= 0) {
  ctx.fillStyle = "white";
  ctx.font = "58px bold sans-serif";
  ctx.fillText("Game Over", 300, 300);
  ctx.textAlign = "left"; // üëà reset l·∫°i ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn Score/Bullet/Grenade

  if (!gameOver) {
    gameOver = true;
    gameOverTime = Date.now();

    // üîä Ph√°t nh·∫°c k·∫øt th√∫c sau 2 gi√¢y
    setTimeout(() => {
      endingMusic.currentTime = 0;
      endingMusic.play();
    }, 5000);
  }
  return;
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i gi·∫≠t c·ªßa s√∫ng
if (gunRecoil > 0) {
  gunRecoil -= RECOIL_SPEED; // Gi·∫£m ƒë·ªô gi·∫≠t d·∫ßn
  if (gunRecoil < 0) gunRecoil = 0; // ƒê·∫£m b·∫£o kh√¥ng gi·∫≠t qu√° ƒë√†
}
drawSpeedBar(); 
drawShieldCooldownBar(); // ‚ûï Hi·ªÉn th·ªã thanh h·ªìi chi√™u SHIELD b√™n d∆∞·ªõi SPEED
drawDebugInfo(); // th√™m d√≤ng n√†y
drawNotifications();

// V·∫Ω thanh t√≠ch t·ª• nƒÉng l∆∞·ª£ng Plasma Rifle
if (currentWeapon === "Plasma Rifle") {
    const barWidth = 200;
    const barHeight = 15;
    const barX = canvas.width / 2 - barWidth / 2;
    const barY = canvas.height - 50; // V·ªã tr√≠ thanh bar

    // V·∫Ω n·ªÅn thanh bar
    ctx.fillStyle = "darkgray";
    ctx.fillRect(barX, barY, barWidth, barHeight);

    // V·∫Ω ph·∫ßn t√≠ch t·ª•
    let chargeFillColor = "rgba(0, 255, 0, 0.8)"; // M·∫∑c ƒë·ªãnh xanh l√°
    if (plasmaChargeAmount >= MAX_PLASMA_CHARGE) {
      chargeFillColor = "rgba(132, 6, 190, 0.95)"; // Cam khi ƒë·∫ßy 100%
    }

    ctx.fillStyle = chargeFillColor;
    ctx.fillRect(barX, barY, barWidth * (plasmaChargeAmount / MAX_PLASMA_CHARGE), barHeight);

    // V·∫Ω vi·ªÅn thanh bar
    ctx.strokeStyle = "white";
    ctx.lineWidth = 2;
    ctx.strokeRect(barX, barY, barWidth, barHeight);

    ctx.fillStyle = "white";
    ctx.font = "14px Arial";
    ctx.textAlign = "center";
    ctx.fillText("PLASMA CHARGE", barX + barWidth / 2, barY - 5);
    ctx.textAlign = "left";
}

// X·ª≠ l√Ω t√≠ch t·ª• nƒÉng l∆∞·ª£ng Plasma Rifle
if (currentWeapon === "Plasma Rifle") {
    if (isChargingPlasma) { // Khi ƒëang gi·ªØ chu·ªôt tr√°i ƒë·ªÉ s·∫°c
        plasmaChargeAmount += CHARGE_RATE;
        // Ch·ªâ gi·ªõi h·∫°n ·ªü m·ª©c t·ªëi ƒëa, kh√¥ng c√≥ qu√° t·∫£i
        if (plasmaChargeAmount >= MAX_PLASMA_CHARGE) { // D√≤ng n√†y ch·ªâ gi·ªõi h·∫°n, kh√¥ng c√≥ logic qu√° t·∫£i
            plasmaChargeAmount = MAX_PLASMA_CHARGE;

          if (!plasmaFullyChargedPlayed) {
            plasmaDingSound.currentTime = 0;
            plasmaDingSound.play();
            plasmaFullyChargedPlayed = true;
          }
          // üîá T·∫Øt √¢m thanh s·∫°c n·∫øu ƒë√£ ƒë·∫ßy
            plasmaChargeSound.pause();
            plasmaChargeSound.currentTime = 0;
            plasmaChargeStarted = false;
        }
    } else if (plasmaChargeAmount > 0) { // Gi·∫£m nƒÉng l∆∞·ª£ng khi kh√¥ng t√≠ch t·ª• (sau khi nh·∫£ chu·ªôt)
        plasmaChargeAmount -= DRAIN_RATE;
        if (plasmaChargeAmount < 0) {
            plasmaChargeAmount = 0;
        }
    }
} else { // Reset n·∫øu ƒë·ªïi s√∫ng kh√¥ng ph·∫£i Plasma Rifle
    plasmaChargeAmount = 0;
    isChargingPlasma = false;
    // overchargeTime = 0; // D√≤ng n√†y ƒë√£ ƒë∆∞·ª£c x√≥a/comment n·∫øu b·∫°n ƒë√£ x√≥a bi·∫øn overchargeTime
}

// Ph√°t √¢m plasma_charge n·∫øu gi·ªØ chu·ªôt ƒë·ªß l√¢u
if (isChargingPlasma && !plasmaChargeStarted) {
    const holdTime = Date.now() - plasmaChargeStartTime;
    if (holdTime >= 100) { // 100ms: gi·ªØ chu·ªôt ng·∫Øn th√¨ kh√¥ng nghe
        plasmaChargeSound.currentTime = 0;
        plasmaChargeSound.loop = true;
        plasmaChargeSound.play();
        plasmaChargeStarted = true;
    }
}



requestAnimationFrame(update);
}
update();
updateZombieSpawnRate();

